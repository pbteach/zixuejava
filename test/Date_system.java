public class Date_system 
{
	public static void main(String[] args) 
	{
		float a=2.3f;
        //Integer b=Float.floatToIntBits(a);
        //System.out.println(Integer.toBinaryString(b));
		byte[] b = float2byte(a);
		for(int i=0;i<b.length;i++){
		  System.out.println(Integer.toBinaryString(b[i]));
		}
		
	}

	public static byte[] float2byte(float f) {  
      
    // 把float转换为byte[]  
    int fbit = Float.floatToIntBits(f);  
      
    byte[] b = new byte[4];    
    for (int i = 0; i < 4; i++) {    
        b[i] = (byte) (fbit >> (24 - i * 8));    
    }   
      
    // 翻转数组  
    int len = b.length;  
    // 建立一个与源数组元素类型相同的数组  
    byte[] dest = new byte[len];  
    // 为了防止修改源数组，将源数组拷贝一份副本  
    System.arraycopy(b, 0, dest, 0, len);  
    byte temp;  
    // 将顺位第i个与倒数第i个交换  
    for (int i = 0; i < len / 2; ++i) {  
        temp = dest[i];  
        dest[i] = dest[len - i - 1];  
        dest[len - i - 1] = temp;  
    }  
      
    return dest;  
      
}  
}
//2    11000000  00000000  00000000  00000000


//2.3  01000000000100110011001100110011

// 19.1f 1000001100110001100110011001101


/*

		float型转化为二进制格式的步骤为：
     （1）先将浮点数的绝对值转为二进制格式。整数部分和小数部分分别转二进制，最后再合并。
     （2）将浮点数的二进制的小数点左移或右移n位，直到小数点移动到第一个有效数字的右边。 
     （3）从小数点右边第一位开始数出23位数字放入第22到第0位。
     （4）如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位。
     （5）如果n是右移得到的或n=0，则将n化为二进制后在左边加“0”补足七位，再将各位求反，再放入第29到第23位。
     （6）如果n是左移得到的，说明指数是正的，第30位放入“1”。如果n是右移得到的或n=0，则第30位放入“0”。 
     （7）如果浮点数是正的，则在第31位放入“0”，否则放入“1”。 

 2.3求二进制过程：
 第一步：先将这个实数的绝对值化为二进制格式。
 0.3 *2    0
 0.6 *2    1
 0.2 *2    0
 0.4 *2    0
 0.8 *2    1
 0.6 *2    1
 0.2 *2    0
 0.4 *2    0
 0.8 *2    1
 ...这里会无限循环(1001)
 0.3的二进制是0.0100110011001...
 
 整数部分2的二进制是10
 将整数部分和小数部分合并后为：
10.0100110011001...(后边循环1001)

第二步：将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有效数字的右边。
在第一步的基础左移一位得出：
1.00100110011001...
第三步：在第二步的结果上从小数点右边第一位开始数出23位数字放入第22到第0位。
00100110011001100110011
第四步：如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位
由于第二步是左移一位，所以1-1=0，七位二进制为0000000
第五步：如果n是左移得到的，说明指数是正的，第30位放入“1”。如果浮点数是正的，则在第31位放入“0”，否则放入“1”。 
最终的二进制是：
01000000000100110011001100110011



10.0100110011    00110011001100110011001

1.00100110011001100110011

01000000000100110011001100110011
*/